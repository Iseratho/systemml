#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("./scripts/algorithms/entity-resolution/primitives/matching.dml") as match;
source("./scripts/algorithms/entity-resolution/primitives/postprocessing.dml") as post;

acm = read("./data/DBLP-ACM/ACM.csv");
dblp = read("./data/DBLP-ACM/DBLP2.csv");
gt = read("./data/DBLP-ACM/DBLP-ACM_perfectMapping.csv");

acm_class = as.frame(matrix(0, rows=nrow(acm), cols=1));
dblp_class = as.frame(matrix(1, rows=nrow(dblp), cols=1));

acm = cbind(acm, acm_class);
dblp = cbind(dblp, dblp_class);

n_acm = nrow(acm);
n_dblp = nrow(dblp);

jspec="{recode:[C1], dummycode:[C2,C3,C4,C5]}";

comb = rbind(acm, dblp);
[X0, MX] = transformencode(target=comb, spec=jspec);
write(MX, "./data/DBLP-ACM/DBLP-ACM_MX.csv");

n_col = ncol(X0);
n_row = n_acm + n_dblp;
SIM = match::cosine2(X0[n_acm+1:n_row,2:n_col], X0[1:n_acm,2:n_col]);

# thresholding
THRES = match::tresholding(SIM, 0.3);

sparse = post::untable_offset(THRES, row_offset=n_acm, col_offset=0);

dense = table(sparse[,1], sparse[,2]);


dec = transformdecode(target=sparse, meta=cbind(MX[,1],MX[,1]), spec="{recode:[C1,C2]}");
output = cbind(dec, as.frame(sparse[,3]));
write(output, "./data/DBLP-ACM/DBLP-ACM_res.csv", sep=",", sparse=FALSE, format="csv");

# Z = seq(1,nrow(THRES));
#
# # dec = cbind(dec, as.frame(t(THRES)));
#
# # convert to sparse via IO
# # THRES2 = transformdecode(target=THRES, meta=MX, spec=jspec)
# write(THRES, "./data/DBLP-ACM/DBLP-ACM_temp.csv", data_type="frame", sparse=TRUE);
# mapping = read("./data/DBLP-ACM/DBLP-ACM_temp.csv", data_type="frame");
# # M = table(mapping[,1], mapping[,2], mapping[,3])
# mapped_ids = transformdecode(target=mapping, spec="{recode:[C1]}, meta=M")
# write(THRES, "./data/DBLP-ACM/DBLP-ACM_res.csv", sparse=TRUE);

















# X = X0[,2:n]
# row_norm = sqrt(rowSums(X ^ 2))
# norm = row_norm %*% t(row_norm)
# dot = X %*% t(X);
# COS = dot / norm

# COS = match::cosine(X0[,2:n])
# SIM = match::slice_relevant(COS, n_acm);

# only the relevant range between the two datasets

# SIM = COS[n_acm:n_acm+n_dblp,1:n_acm]
# SIM = match::slice_relevant(COS, n_acm);

# thresholding
# THRES = (SIM > 0.01) * SIM
