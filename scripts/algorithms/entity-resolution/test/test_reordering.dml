


A = read("./scripts/algorithms/entity-resolution/test/graph.ijv");
#print(toString(A, rows=15, cols=15));

A_rowSum = rowSums(A);
#print(toString(A_rowSum, rows=15, cols=15));

A_conc = cbind(A_rowSum, A);
#print(toString(A_conc, rows=15, cols=15));

R_index = order(target=A_conc, by=1, decreasing = FALSE, index.return=TRUE);
R_data = order(target=A_conc, by=1, decreasing = FALSE, index.return=FALSE);

R = R_data[,2:ncol(R_data)]

#print("index\n" + toString(R_index, rows=15, cols=15));
#print("data\n" + toString(R, rows=15, cols=15));

# order back

R_comb = cbind(R_index, R);
#print("data\n" + toString(R_comb, rows=15, cols=15));
B = order(target=R_comb, by=1, decreasing = FALSE, index.return=FALSE);
B = B[,2:ncol(B)]

print(toString(A == B, rows=15, cols=15));

# create a symmetrical
A = A %*% t(A);
R = R %*% t(R);

# restore symm A from R and R_index
R_comb = cbind(R_index, R);
S = order(target=R_comb, by=1, decreasing = FALSE, index.return=FALSE);
S = S[,2:ncol(S)];

S_comb = cbind(R_index, t(S));
S = order(target=S_comb, by=1, decreasing = FALSE, index.return=FALSE);
S = S[,2:ncol(S)];

print(toString(A == S, rows=15, cols=15));
#print(toString(S, rows=15, cols=15));
