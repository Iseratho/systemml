#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Limitation: no tokenizer is available, thus input must already be tokenized
# assumes that the file is in the format entity_id,word,count
# also assumes that ids are integers and not strings

source("./scripts/algorithms/entity-resolution/primitives/matching.dml") as match;
source("./scripts/algorithms/entity-resolution/primitives/evaluation.dml") as eval;
source("./scripts/algorithms/entity-resolution/primitives/clustering.dml") as cluster;
source("./scripts/algorithms/entity-resolution/primitives/preprocessing.dml") as pre;
source("./scripts/algorithms/entity-resolution/primitives/postprocessing.dml") as post;

FX = read("./data/affiliationstrings/affiliationstrings_tokens.csv");
FY = read("./data/affiliationstrings/affiliationstrings_mapping_fixed.csv");

threshold = 0.9;

[X, MX] = pre::convert_frame_tokens_to_matrix_bow(FX);

write(MX, "./data/affiliationstrings/affiliationstrings_MX.csv");

SIM = match::cosine(X);
THRES = match::tresholding(SIM, threshold);

# avoid duplicates and self similarity
# TRI = upper.tri(target=THRES, diag=FALSE, values=TRUE);
# write(TRI, "./data/affiliationstrings/affiliationstrings_res.csv", sparse=TRUE);

# eval performance

# MATCH = upper.tri(target=THRES, diag=FALSE, values=FALSE) + lower.tri(target=THRES, diag=FALSE, values=FALSE);

MATCH = (SIM > threshold);
CLUSTER = cluster::connected_components(MATCH);
#CLUSTER = MATCH;

# ignore diagonals, double diag() keeps only diagonal of matrix
MATCH_VALS = CLUSTER * SIM - diag(diag(SIM));
sparse = post::untable(MATCH_VALS);
dec = transformdecode(target=sparse, meta=cbind(MX[,1],MX[,1]), spec="{recode:[C1,C2]}");
output = cbind(dec, as.frame(sparse[,3]));
write(output, "./data/affiliationstrings/affiliationstrings_res.csv", sep=",", sparse=FALSE, format="csv");

jspecy="{recode:[C1,C2]}";
MY = cbind(MX[,1],MX[,1]);
Y0 = transformapply(target=FY, spec=jspecy, meta=MY);
Y = as.matrix(FY);
GT = table(Y0[,1], Y0[,2], 1);

eval::print_eval_stats(MATCH, GT);
eval::print_eval_stats(CLUSTER, GT);
