#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("./scripts/algorithms/entity-resolution/primitives/matching.dml") as match;
source("./scripts/algorithms/entity-resolution/primitives/blocking.dml") as block;

FX = read("./data/affiliationstrings/affiliationstrings_ids.csv");
FY = read("./data/affiliationstrings/affiliationstrings_mapping.csv");

jspec = "{recode:[C1],dummycode:[C2]}"
[X0, MX] = transformencode(target=FX, spec=jspec);

# try naive blocking based on ids
BLOCKS = block::hash_blocking(X0[,1], 5);
# print("blocks")
# print(toString(BLOCKS, rows=10));

# BLOCKLIST = block::split_hash_2(X0[,1]);
# print("blocklist")
# for (i in 1:2) {
#     block = BLOCKLIST[i,]
# }

# matrix = as.matrix(FX)
# write(MX, "./scripts/algorcleithms/heaentity-resolution/test/data/affiliationstrings_encode.csv")

n = ncol(X0)
SIM = match::cosine(X0[,2:n]);
# SIM = X0[,2:n] %*% t(X0[,2:n]);
THRES = match::tresholding(SIM, 0.01);

write(THRES, "./systemml/data/affiliationstrings/affiliationstrings_res.csv", sparse=TRUE);