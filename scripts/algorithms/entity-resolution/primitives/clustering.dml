#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

dfs = function(Matrix[Double] GRAPH, Integer vertex, Matrix[Double] marked, Matrix[Double] id, Integer count) return (Matrix[Double] id, Matrix[Double] marked) {
  marked[vertex,] = 1;
  id[vertex,] = count;
  for (col in 1:ncol(GRAPH)) {
    if (as.scalar(GRAPH[vertex,col])) {
      if (!as.scalar(marked[col,])) {
        [id, marked] = dfs(GRAPH, col, marked, id, count);
      }
    }
  }
}

connected_components = function(Matrix[Double] ADJACENCY) return (Matrix[Double] COMPONENTS) {
  rows = nrow(ADJACENCY);
  marked = matrix(0, rows=rows, cols=1);
  id = matrix(0, rows=nrow(ADJACENCY), cols=1);
  count = 0;
  for (s in 1:rows) {
    if (!as.scalar(marked[s,])) {
      [id, marked] = dfs(ADJACENCY, s, marked, id, count);
      count = count + 1;
    }
  }
  COMPONENTS = ADJACENCY;
  for (s in 1:rows) {
    c = as.scalar(id[s,]);
    v = id == c;
    COMPONENTS[,s] = v;
  }
  COMPONENTS = COMPONENTS - diag(diag(COMPONENTS));
}
