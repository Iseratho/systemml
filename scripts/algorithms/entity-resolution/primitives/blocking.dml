#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

naive_blocking = function(Matrix[Double] X, Integer num_blocks) return (Matrix[Double] BLOCKS) {
  block_size = ceil(nrow(X) / num_blocks);
  BLOCKS = block_size * seq(1, num_blocks);
  BLOCKS[num_blocks,] = nrow(X)+1;
  BLOCKS = rbind(as.matrix(1), BLOCKS);
}

hash_blocking = function(Matrix[Double] X, Integer num_blocks) return (Matrix[Double] BLOCKS) {
  BLOCKS = X %% num_blocks;
}

# split_hash_2 = function(Matrix[Double] X) return (List[Unknown] BLOCKLIST) {
#   BLOCKS = X %% 2;
#   BLOCKLIST = list(BLOCKS == 1, BLOCKS == 0);
# }

gen_rand_hyperplanes = function(Integer num_hyperplanes, Integer dimension) return (Matrix[Double] HYP_MATRIX) {
  HYP_MATRIX = rand(rows=num_hyperplanes, cols=dimension, min=-1, max=1);
}