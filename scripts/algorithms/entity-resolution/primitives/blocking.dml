#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

naive_blocking = function(Matrix[Double] X, Integer num_blocks) return (Matrix[Double] BLOCKS) {
  block_size = ceil(nrow(X) / num_blocks);
  BLOCKS = block_size * seq(1, num_blocks);
  BLOCKS[num_blocks,] = nrow(X)+1;
  BLOCKS = rbind(as.matrix(1), BLOCKS);
}

sort_by_vector = function(Matrix[Double] X, Matrix[Double] v, Boolean remove_v) return (Matrix[Double] X_index, Matrix[Double] X_sorted) {
  X_conc = cbind(v, X);
  X_index = order(target=X_conc, by=1, decreasing = FALSE, index.return=TRUE);
  X_sorted = order(target=X_conc, by=1, decreasing = FALSE, index.return=FALSE);
  if (remove_v) {
    # Remove v Column from data
    X_sorted = X_sorted[,2:ncol(X_sorted)];
  }
}

row_sum_sorting = function(Matrix[Double] X) return (Matrix[Double] X_index, Matrix[Double] X_sorted) {
  X_rowSum = rowSums(X);
  [X_index, X_sorted] = sort_by_vector(X, X_rowSum, TRUE);
}

reindex_rowwise = function(Matrix[Double] X, Matrix[Double] X_index) return (Matrix[Double] X_reindex) {
  X_conc = cbind(X_index, X);
  X_reindex = order(target=X_conc, by=1, decreasing = FALSE, index.return=FALSE);
  # Remove index column
  X_reindex = X_reindex[,2:ncol(X_reindex)];
}

reindex_rows_and_cols = function(Matrix[Double] X, Matrix[Double] X_index) return (Matrix[Double] X_reindex) {
  # First reindex rows
  X_reindex = X;
  X_reindex = reindex_rowwise(X_reindex, X_index);
  # Then transpose and repeat
  X_reindex = t(X_reindex);
  X_reindex = reindex_rowwise(X_reindex, X_index);
}

hash_blocking = function(Matrix[Double] X, Integer num_blocks) return (Matrix[Double] BLOCKS) {
  BLOCKS = X %% num_blocks;
}

# split_hash_2 = function(Matrix[Double] X) return (List[Unknown] BLOCKLIST) {
#   BLOCKS = X %% 2;
#   BLOCKLIST = list(BLOCKS == 1, BLOCKS == 0);
# }

gen_rand_hyperplanes = function(Integer num_hyperplanes, Integer dimension) return (Matrix[Double] H) {
  H = rand(rows=num_hyperplanes, cols=dimension, min=-1, max=1);
}

lsh = function(Matrix[Double] X, Integer num_hyperplanes) return (Matrix[Double] X_code) {
  H = gen_rand_hyperplanes(num_hyperplanes, ncol(X));
  X_hash = X %*% t(H);
  X_code = (X_hash > 0) - (X_hash < 0);
}

aggregate_lsh_code = function(Matrix[Double] X_code) return (Matrix[Double] X_agg) {
  X_pos = (X_code > 0);
  pos_weights = 2^seq(ncol(X_code)-1, 0);
  X_weights = X_pos * t(pos_weights);
  X_agg = rowSums(X_weights);
}

lsh_sorting = function(Matrix[Double] X, Integer num_hyperplanes) return (Matrix[Double] X_index, Matrix[Double] X_hash, Matrix[Double] X_sorted) {
  X_code = lsh(X, num_hyperplanes);
  X_agg = aggregate_lsh_code(X_code);
  [X_index, X_sorted_with_hash] = sort_by_vector(X, X_agg, FALSE);
  X_sorted = X_sorted_with_hash[,2:ncol(X_sorted_with_hash)];
  X_hash = X_sorted_with_hash[,1];
}
