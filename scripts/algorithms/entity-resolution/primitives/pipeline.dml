#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("./scripts/algorithms/entity-resolution/primitives/blocking.dml") as block;
source("./scripts/algorithms/entity-resolution/primitives/matching.dml") as match;
source("./scripts/algorithms/entity-resolution/primitives/clustering.dml") as cluster;

entity_clustering_pipeline = function(Matrix[Double] X, Integer num_blocks, Double threshold) return (Matrix[Double] X_cluster) {
  blocks = block::naive_blocking(X, num_blocks);
  X_cluster = matrix(0, nrow(X), nrow(X));
  # system ds raises false positives for dependency check, but chunks of matrix are indepedantly addresses
  # supress error with check = 0
  parfor (i in 1:nrow(blocks)-1, check = 0) {
    block_start = as.scalar(blocks[i,]);
    block_end = as.scalar(blocks[i+1,])-1;
    X_block = X[block_start:block_end,];
    X_sim = match::cosine(X_block);
    X_thres = match::tresholding(X_sim, threshold);
    X_match = (X_sim > threshold);
    X_comp = cluster::connected_components(X_match);
    X_cluster[block_start:block_end,block_start:block_end] = X_comp * X_sim;
  }
}

#binary_entity_resolution_pipeline = function(Matrix[Double] X, Matrix[Double] Y, Integer num_blocks, Double threshold) return (Matrix[Double] XY_pairs) {
#
#}