#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

source("./scripts/algorithms/entity-resolution/primitives/blocking.dml") as block;
source("./scripts/algorithms/entity-resolution/primitives/matching.dml") as match;
source("./scripts/algorithms/entity-resolution/primitives/clustering.dml") as cluster;

entity_clustering_pipeline = function(Matrix[Double] X, Integer num_blocks, Double threshold) return (Matrix[Double] X_cluster) {
  # First sort the matrix
  [X_index, X_sorted] = block::row_sum_sorting(X);
  X = X_sorted;
  # Perform blocking: match and cluster each block
  blocks = block::naive_blocking(X_sorted, num_blocks);
  X_cluster = matrix(0, nrow(X_sorted), nrow(X_sorted));
  # system ds raises false positives for dependency check, but chunks of matrix are indepedantly addresses
  # supress error with check = 0
  parfor (i in 1:nrow(blocks)-1, check = 0) {
    block_start = as.scalar(blocks[i,]);
    block_end = as.scalar(blocks[i+1,])-1;
    X_block = X_sorted[block_start:block_end,];
    X_sim = match::cosine(X_block);
    X_thres = match::tresholding(X_sim, threshold);
    X_match = (X_sim > threshold);
    X_comp = cluster::cluster_by_connected_components(X_match);
    X_cluster[block_start:block_end,block_start:block_end] = X_comp * X_sim;
  }
  # Reindex back the symmetrical matrix
  X_cluster = block::reindex_rows_and_cols(X_cluster, X_index);
}

entity_clustering_pipeline_lsh = function(Matrix[Double] X, Integer num_hashtables, Integer num_hyperplanes, Double threshold) return (Matrix[Double] X_cluster) {
  X_cluster = matrix(0, nrow(X), nrow(X));
  # First get the LSH blocks
  for (unused in 1:num_hashtables) {
    [X_index, X_hash, X_sorted] = block::lsh_sorting(X, num_hyperplanes);
    X_cluster_local = matrix(0, nrow(X), nrow(X));
    ## Perform blocking: match and cluster each block
    # TODO: convert to parfor with check=0
    for (i in 0:2^num_hyperplanes-1) {
      # TODO: convert X_hash to blocks and iterate as in entity_clustering_pipeline
      new_index = seq(1, nrow(X_hash));
      select_vector = (X_hash == i);
      sub_index = removeEmpty(target=new_index, margin="rows", select=select_vector);
      block_start = as.scalar(sub_index[1,]);
      block_end = as.scalar(sub_index[nrow(sub_index),]);
      if (block_start < block_end) {
        # Only apply to existing blocks
        X_block = X_sorted[block_start:block_end,];
        X_sim = match::cosine(X_block);
        X_thres = match::tresholding(X_sim, threshold);
        X_match = (X_sim > threshold);
        X_comp = cluster::cluster_by_connected_components(X_match);
        X_new_block = X_cluster_local[block_start:block_end,block_start:block_end] | (X_comp * X_sim);
        if (sum(X_new_block) > 0) {
          # Don't write empty blocks
          #X_cluster[block_start:block_end,block_start:block_end] = rand(rows=block_end-block_start+1, cols=block_end-block_start+1, sparsity=0.05);
          # TODO: there is a bug that the expression below cannot be written mutliple times
          X_cluster_local[block_start:block_end,block_start:block_end] = X_new_block;
        }
      }
    }
    ## Reindex back the symmetrical matrix
    X_cluster = X_cluster | block::reindex_rows_and_cols(X_cluster_local, X_index);
  }
}

binary_entity_resolution_pipeline = function(Matrix[Double] X, Matrix[Double] Y, Integer num_blocks, Double threshold) return (Matrix[Double] XY_pairs) {
  # TODO: blocking
  XY_sim = match::cosine2(X, Y);
  XY_pairs = match::tresholding(XY_sim, threshold);
  # Clustering is not needed in this case
}